<?php

/**
 * @file
 * Installation hooks for Event Types vocabulary.
 */

/**
 * Implements hook_install().
 */
function c4m_vocab_event_type_install() {
  //revert thyself.
  features_revert_module('c4m_vocab_event_type');
  $vocabulary = taxonomy_vocabulary_machine_name_load('c4m_vocab_event_type');
  if ($vocabulary === False) {
    drush_print("---- bugger, this should not happen -----");
    // feature should have done it. No point of continuing.
    return;
  }

  if (!empty($vocabulary)) {
    drush_print("---- Importing the new event_types into the vocabulary -----");
    // create the terms from the existing field based on the previous field:
    $prepared_terms = _c4m_vocab_event_type_get_terms_from_field('c4m_event_type');
    if(!empty($prepared_terms)) {
      _c4m_vocab_event_type_install_terms($vocabulary, $prepared_terms);
    }
  }

  // create term field and attach them to be used in the content-types.
  $field = array(
    'field_name' => 'c4m_vocab_event_type',
    'type' => 'taxonomy_term_reference',
    'settings' => array(
      'allowed_values' => array(
        array(
          'vocabulary' => $vocabulary->machine_name,
          'parent' => 0
          ),
      ),
    ),
  );
  field_create_field($field);

  // attach it to the content types;
  $content_types = array('event' => '1','event_site' => '3');
  foreach ($content_types as $content_type => $weigth) {
    $instance = array(
      'field_name' => 'c4m_vocab_event_type',
      'entity_type' => 'node',
      'label' => 'Event type',
      'bundle' => $content_type,
      'required' => true,
      'widget' => array(
        'type' => 'options_buttons',
        'weight' => $weigth,
      ),
      'display' => array(
        'default' => array('type' => 'hidden'),
        'teaser' => array('type' => 'hidden')
      ),
    );
    field_create_instance($instance);
  }

  _c4m_vocab_event_type_update_related_node();
}

/**
 * Implements hook_uninstall().
 */
function c4m_vocab_event_type_uninstall() {
  // Clean up of the terms.
  $vocab = taxonomy_vocabulary_machine_name_load('c4m_vocab_event_type');
  // $terms = entity_load('taxonomy_term', FALSE, array('vid' => $vocab->vid));
  if (!empty($vocab)) {
    taxonomy_vocabulary_delete($vocab->vid);
  }
}

function c4m_vocab_event_type_post_features_install_feature() {
  //Only the first time and vocabulary is empty.
  $vocab = taxonomy_vocabulary_machine_name_load('c4m_event_types');
  $terms = entity_load('taxonomy_term', FALSE, array('vid' => $vocab->vid));
  if (empty($terms)) {
    c4m_vocab_event_type_install_terms($vocab);
  }
}

/**
 * Helper function to import the terms into the vocabulary.
 */
function _c4m_vocab_event_type_install_terms($vocab, $terms) {
    // The default event_types.
    $weight = -10;
    foreach ($terms as $term) {
      $term_object              = new stdClass();
      $term_object->name        = $term['name'];
      $term_object->description = 'Event Type ' . $term['name'];
      $term_object->vid         = $vocab->vid;
      $term_object->weight      = $weight;
      if (!empty($term['external_id'])) {
        $term_object->c4m_external_event_type_id  = array(LANGUAGE_NONE => array(array("value" => $term['external_id'])));
      }
      $term_object->c4m_et_allowed_in_event_site = array(LANGUAGE_NONE => array(array("value" => $term['event_site'])));
      $term_object->c4m_et_allowed_in_event      = array(LANGUAGE_NONE => array(array("value" => $term['event'])));

      taxonomy_term_save($term_object);

      $weight++;
    }
  }


function _c4m_vocab_event_type_get_terms_from_field($field_name) {
  //$field_settings =
  $all_fields_of_platform = field_info_fields();
  $allowed_values= list_allowed_values($all_fields_of_platform[$field_name]);
  $prepared_terms = array();
  foreach ($allowed_values as $key => $allowed_value) {
    $prepared_terms[] =  array('name' => st($allowed_value), 'external_id' => '0' , "event_site" => '0' , "event" => '0');
  }
  return $prepared_terms;
}
/**
 * update nodes (event, event_site) so that the new field matches the old field.
 * update the taxonomy term, to be used in each content type
 */
function _c4m_vocab_event_type_update_related_node() {
  $field_name = 'c4m_event_type';
  $field_c4m_event_type = field_info_field($field_name);

  $vocabulary_event_type = taxonomy_vocabulary_machine_name_load("c4m_vocab_event_type");
  $voc_event_types =  taxonomy_get_tree($vocabulary_event_type->vid, 0, NULL, True);
  $voc_event_types_sorted_name = array();
  foreach( $voc_event_types as $voc_taxonomy_event_type) {
    $voc_event_types_sorted_name[$voc_taxonomy_event_type->name] = $voc_taxonomy_event_type;
  }

  $result = db_query("SELECT nid FROM {node} WHERE type IN ('event', 'event_site')");
  while($row = $result->fetchObject()) {
    drush_print(dt("---- Going to process nid : [@nid] -----", array('@nid' => $row->nid)));
    $node = node_load($row->nid);
    $c4m_event_type = $node->c4m_event_type[LANGUAGE_NONE][0]["value"];
    if (array_key_exists($c4m_event_type, $field_c4m_event_type["settings"]["allowed_values"])) {
      // Find the correct taxonomy ID
      $c4m_event_type_value = $field_c4m_event_type["settings"]["allowed_values"][$c4m_event_type];

      if (array_key_exists($c4m_event_type_value, $voc_event_types_sorted_name)) {
        $node->c4m_vocab_event_type = array(LANGUAGE_NONE => array(array("tid" => $voc_event_types_sorted_name[$c4m_event_type_value]->tid)));
        node_save($node);
        // also update the taxonomy if needed.
        if ($node->type == "event") {
          if ($voc_event_types_sorted_name[$c4m_event_type_value]->c4m_et_allowed_in_event[LANGUAGE_NONE][0]["value"] !== "1") {
            $voc_event_types_sorted_name[$c4m_event_type_value]->c4m_et_allowed_in_event[LANGUAGE_NONE][0]["value"] = "1";
            taxonomy_term_save($voc_event_types_sorted_name[$c4m_event_type_value]);
          }
        }
        elseif ($node->type == "event_site"){
          if ($voc_event_types_sorted_name[$c4m_event_type_value]->c4m_et_allowed_in_event_site[LANGUAGE_NONE][0]["value"] !== "1") {
            $voc_event_types_sorted_name[$c4m_event_type_value]->c4m_et_allowed_in_event_site[LANGUAGE_NONE][0]["value"] = "1";
            taxonomy_term_save($voc_event_types_sorted_name[$c4m_event_type_value]);
          }
        }
      }
    }
  }
}
