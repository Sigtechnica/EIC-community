<?php

/**
 * @file
 * Administration functionality.
 */

/**
 * Implements hook_menu().
 */
function c4m_admin_menu() {
  $items = array();

  $items['admin/config/c4m'] = array(
    'title' => 'capacity4more',
    'description' => 'capacity4more admin configuration.',
    'weight' => -100,
    'page callback' => 'system_admin_menu_block_page',
    'access arguments' => array('access administration pages'),
    'file' => 'system.admin.inc',
    'file path' => drupal_get_path('module', 'system'),
    'position' => 'right',
  );

  $items['admin/config/c4m/disclaimer'] = array(
    'title' => 'Disclaimer text settings',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('c4m_admin_manage_disclaimer_form'),
    'access arguments' => array('administer disclaimer settings'),
    'type' => MENU_NORMAL_ITEM,
    'file' => 'c4m_admin.pages.inc',
  );

  $items['admin/config/c4m/breadcrumbs'] = array(
    'access arguments' => array('administer site configuration'),
    'description' => 'Manage the breadcrumbs settings',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('c4m_admin_breadcrumbs_settings_form'),
    'title' => 'Breadcrumbs settings',
    'type' => MENU_NORMAL_ITEM,
  );

  return $items;
}

/**
 * Implements hook_menu_alter().
 *
 * Override the theme of user creation form via the admin because of the
 * vocab widget.
 */
function c4m_admin_menu_alter(&$items) {
  $items['admin/people/create']['theme callback'] = 'c4m_admin_set_kapablo_theme';
  $items['admin/people/create']['theme arguments'] = array();
}

/**
 * Theme callback; Set the kapablo theme over the user creation form via admin.
 *
 * @return string
 *   The machine name of the kapablo theme.
 */
function c4m_admin_set_kapablo_theme() {
  return 'shake';
}

/**
 * Returns site administrators ids.
 *
 * @param bool $filter_event_user
 *   Whether to filter out current user ID from result, or not.
 *
 * @return array
 *   Ids of site admins, or empty array, if none found.
 */
function c4m_admin_get_admins_ids($filter_event_user = FALSE) {
  // Get all site administrators.
  $admin_role = user_role_load_by_name('administrator');
  $results = db_select('users_roles', 'r')
    ->fields('r', array('uid'))
    ->condition('rid', $admin_role->rid, '=')
    ->execute()
    ->fetchAll();

  foreach ($results as &$result) {
    $result = $result->uid;
  }

  if ($filter_event_user) {
    // Filter current user ID from array with admins ids.
    global $user;

    if (($index = array_search($user->uid, $results)) !== FALSE) {
      unset($results[$index]);
    }
  }

  return $results;
}

/**
 * Returns site administrators ids. Filters out current user.
 *
 * @return array
 *   Ids of site admins, or empty array, if none found.
 */
function c4m_admin_get_admins_ids_for_notification() {
  return c4m_admin_get_admins_ids(TRUE);
}

/**
 * Implements hook_permission().
 */
function c4m_admin_permission() {
  $perms['administer disclaimer settings'] = array(
    'title' => t('Administer disclaimer settings'),
    'description' => t('Allows the user to modify the disclaimer text.'),
  );

  return $perms;
}

/**
 * Form builder for breadcrumbs settings.
 */
function c4m_admin_breadcrumbs_settings_form($form, &$form_state) {
  $title = variable_get('c4m_smei_dashboard_title');
  $url = variable_get('c4m_smei_dashboard_url');
  $form['c4m_smei_dashboard_title'] = array(
    '#type' => 'textfield',
    '#title' => t('SMEi Dashboard breadcrumb title'),
    '#required' => TRUE,
    '#default_value' => (!empty($title)) ? $title : t('SMEi Dashboard'),
  );

  $form['c4m_smei_dashboard_url'] = array(
    '#type' => 'textfield',
    '#title' => t('Link to SMEi Dashboard'),
    '#required' => TRUE,
    '#default_value' => (!empty($url)) ? $url : "",
  );

  $form['actions']['#type'] = 'actions';
  $form['actions']['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Save'),
  );

  return $form;
}

/**
 * Validation handler for c4m_admin_breadcrumbs_settings_form.
 */
function c4m_admin_breadcrumbs_settings_form_validate(
  $form,
  &$form_state
) {
  if (empty($form_state['values']['c4m_smei_dashboard_title'])) {
    form_set_error('c4m_smei_dashboard_title',
      t('Title for SMEi dashboard is required.'));
    return;
  }

  if (empty($form_state['values']['c4m_smei_dashboard_url'])) {
    form_set_error('c4m_smei_dashboard_url',
      t('Url to SMEi dashboard is required.'));
    return;
  }

  if (filter_var($form_state['values']['c4m_smei_dashboard_url'], FILTER_VALIDATE_URL) === FALSE) {
    form_set_error('c4m_smei_dashboard_url',
      t('Url to SMEi dashboard is not valid.'));
    return;
  }
}

/**
 * Submit handler for c4m_admin_breadcrumbs_settings_form.
 */
function c4m_admin_breadcrumbs_settings_form_submit(
  $form,
  &$form_state
) {
  if (!empty($form_state['values']['c4m_smei_dashboard_title'])) {
    variable_set('c4m_smei_dashboard_title',
      $form_state['values']['c4m_smei_dashboard_title']);
  }
  if (!empty($form_state['values']['c4m_smei_dashboard_url'])) {
    variable_set('c4m_smei_dashboard_url',
      $form_state['values']['c4m_smei_dashboard_url']);
  }
  drupal_set_message(t("Breadcrumbs settings were saved."));
}
