<?php

/**
 * @file
 * Code for the Public basic access to platform feature.
 */

/**
 * The ScaleUp EU node id
 */
define('SCALEUP_NODEPATH', "node/6092");

include_once 'c4m_public_access.features.inc';


/**
 * Implements hook_node_access().
 *
 * @param $node
 * @param $account
 *
 * @return string
 */
function c4m_public_access_node_access($node, $op, $account) {
  // anonymous users can only see the about us page (for books) , articles and event-sites.
  if ($account->uid === 0 && $op === "view") {
    if (!in_array($node->type, ['article', 'book', 'event_site','group']) ) {
      return NODE_ACCESS_DENY;
    }
    if ($node->type == "book") {
      // only allow about us and help-guidance section.
      if ($node->title === "About Us" or strpos(drupal_get_path_alias($_GET['q']),'help-guidance') !== False ) {
        return NODE_ACCESS_ALLOW;
      }
      else {
        return NODE_ACCESS_DENY;
      }
  ;  }

    // Only allow event_sites with published og_status and non empty dashboard_id
    if ($node->type == "event_site") {
      if ($node->c4m_og_status["und"][0]["value"] !== "published" || empty($node->c4m_event_dashboard_id["und"][0]["value"])) {
        return NODE_ACCESS_DENY;
      }

      // disable in event_sites also the sub items.
      if (in_array(current_path(), ["documents","discussions", "news", "media", "members"])) {
        return NODE_ACCESS_DENY;
      }
    }
  }

}


/**
 * Lets modules alter a Solr search request before sending it.
 *
 * Limit events for anonymous to only coming from the webservice.
 *
 * @param array $call_args
 *   An associative array containing all three arguments to the
 *   SearchApiSolrConnectionInterface::search() call ("query", "params" and
 *   "method") as references.
 * @param SearchApiQueryInterface $query
 *   The SearchApiQueryInterface object representing the executed search query.
 */
function c4m_public_access_search_api_solr_query_alter(array &$call_args, SearchApiQueryInterface $query) {
  if (user_is_anonymous()) {
    $search_pages = array("search_api_views:c4m_overview_events_landing:page" ,
                          "search_api_views:c4m_overview_events_landing:attachment_1",
                          "search_api_views:c4m_overview_events:page",
                          "search_api_views:c4m_overview_events:page_1");
    if (in_array($query->getOption('search id'), $search_pages) ) {
      $new_filters = array('ss_c4m_og_status:"published"', 'is_c4m_event_dashboard_id:[* TO *]');
      // Want to add before the index_id and hash
      foreach($new_filters as $new_filter) {
        $position = count($call_args['params']['fq']) - 2;
        array_splice($call_args['params']['fq'], $position, 0, $new_filter);
      }
    }
  }
}

/**
 * Hide the writers first and last in the results.
 *
 * @param $build
 * @param $type
 */

function c4m_public_access_entity_view_alter(&$build, $type) {
  if (user_is_anonymous() && $build['#bundle'] == 'article') {
    if (isset($build["c4m_user_first_and_last_name"])) {
      $build["c4m_user_first_and_last_name"][0]["#markup"]="<span class='user-name'>The EIC </span>";
    }

  }

}

function c4m_public_access_module_implements_alter(&$implementations, $hook) {
  // make sure this access check is done after the other ones.
  if ($hook == 'node_access') {
    $group = $implementations['c4m_public_access'];
    unset($implementations['c4m_public_access']);
    $implementations['c4m_public_access'] = $group;
  }
}

/**
 * Implements hook_views_default_views_alter).
 */
function c4m_public_access_views_default_views_alter(&$views) {
  $to_be_secured_views = array( 'c4m_overview_organisations' => 'view any organisation content',
                                'c4m_overview_events' => 'view any event_site content',
                                'c4m_events_calendar' => 'view any event_site content',
                                'c4m_overview_events_landing' => 'view any event_site content',
                                'c4m_overview_topics' => 'view any topic content',
                                'c4m_learning_content' => 'view any document content'
                                );
  foreach ($to_be_secured_views as $view_system_name => $view_permission) {
      if (isset($views[$view_system_name])) {
        $views[$view_system_name]->display['default']->display_options['access']['perm'] = $view_permission;
      }
  }
}

/**
 * Implements hook_default_page_manager_pages_alter().
 */
function c4m_public_access_default_page_manager_pages_alter(&$pages) {
  if (user_is_anonymous() && isset($pages['c4m_homepage'])) {
    // Make homepage accessible for anonymous users.
    $homepage_panel = &$pages['c4m_homepage']->default_handlers['page_c4m_homepage_panel_context_2'];
    $homepage_panel->disabled = FALSE;
    // Disable the featured_block.
    $homepage_panel->conf['display']->content['new-e15ee274-a647-4920-85c1-4bb1286686f2']
                   ->shown = FALSE;
    // Disable the statistics.
    $pages['c4m_homepage']->default_handlers['page_c4m_homepage_panel_context_2']
                          ->conf['display']->content['new-0611c655-1657-489e-a844-c6648460af7c']
                          ->shown = FALSE;

    // Hide the activity stream.
    $pages['c4m_homepage']->default_handlers['page_c4m_homepage_panel_context_2']
                          ->conf['display']->content['new-b3476758-2767-4be2-b3ad-84697ac801c3']
                          ->shown = FALSE;
    // Hide the NOJS activity stream.
    $pages['c4m_homepage']->default_handlers['page_c4m_homepage_panel_context_2']
                          ->conf['display']->content['new-98afd53a-7134-42fa-aa33-75d6cdc905d7']
                          ->shown = FALSE;
    // Hide the c4m_featured_groups
    $pages['c4m_homepage']->default_handlers['page_c4m_homepage_panel_context_2']
                          ->conf['display']->content['new-e00433dd-e5e5-4c05-8231-b4642b65f37f']
                          ->shown = FALSE;
    // Hide the c4m_featured_projects.
    $pages['c4m_homepage']->default_handlers['page_c4m_homepage_panel_context_2']
                          ->conf['display']->content['new-21833ed8-d9c8-4bd3-a4fd-b3127b5351a1']
                          ->shown = FALSE;
    // Hide the c4m_features_homepage_newsletter
    $pages['c4m_homepage']->default_handlers['page_c4m_homepage_panel_context_2']
                          ->conf['display']->content['new-916fa034-f4ff-45cd-8e79-f5b40fced21c']
                          ->shown = FALSE;

  }

}

/**
 * Perform alterations to a custom block.
 *
 * Modules can implement hook_block_view_MODULE_DELTA_alter() to modify a
 * specific block, rather than implementing hook_block_view_alter().
 *
 **/
function c4m_public_access_block_view_c4m_features_header_c4m_header_menu_alter(&$data, $block){
  if (user_is_anonymous() && current_path() !== "access-denied-ecas") {
    $data['content'] .= '<a id="sign_up" href="/register">Sign up now!</a>';
  }
}

