<?php

/**
 * @file
 * Code for the Web Services feature.
 */

include_once 'c4m_web_services.features.inc';

/**
 * Implements hook_services_authentication_info().
 */
function c4m_web_services_services_authentication_info() {
  return array(
    'title' => t('C4M - Request-specific token authorisation'),
    'description' => t('Request-specific token is sent in each request.'),
    'authenticate_call' => '_c4m_web_services_authenticate_call',
    'security_settings' => '_c4m_web_services_security_settings',
    'default_security_settings' => '_c4m_web_services_default_security_settings',
  );
}

/**
 * Authorises a call using request-specific token to verify the request.
 *
 * @param array $settings
 *   The settings for the authorisation module.
 * @param array $method
 *   The method that's being called.
 * @param array $args
 *   The arguments that are being used to call the method.
 *
 * @return void|string
 *   Returns nothing, or a error message if authorisation fails.
 *
 * @see c4m_web_services_services_authentication_info()
 */
function _c4m_web_services_authenticate_call($settings, $method, $args) {
  // Get the original request body.
  $endpoint_path = services_get_server_info('endpoint_path', '');
  $context = new ServicesContext($endpoint_path);
  $context->buildFromGlobals();
  $request_body = $context->getRequestBody();

  $arguments = _c4m_web_services_array_flatten($args);

  $valid_token = FALSE;
  foreach ($arguments as $key => $one) {
    if ($key == $settings["authorization_token_name"] && $one == $settings["authorization_token_key"]) {
      $valid_token = TRUE;
      break;
    }
  }
  if (!$valid_token) {
    return t('Invalid token value.');
  }

  // Open session for Admin user to edit/create content.
  global $user;
  $original_user = $user;
  drupal_save_session(FALSE);
  $user = user_load_by_name('dashboard_user');
  if (empty($user)) {
    return t('Dashboard user not available, contact site administrator.');
  }
}


/**
 * Returns an associative array of Form API elements for a settings form.
 *
 * @see c4m_web_services_services_authentication_info()
 */
function _c4m_web_services_default_security_settings() {
  return array(
    'authorization_token_name' => 'AuthorizationToken',
    'authorization_token_key' => 'dh349fh3Fh48gfdFDhsg23DFdgh',
  );
}

/**
 * Returns an array with the default settings for the auth module.
 *
 * @see c4m_web_services_services_authentication_info()
 */
function _c4m_web_services_security_settings($settings, &$form_state) {
  $form = array();

  $form['authorization_token_name'] = array(
    '#type' => 'textfield',
    '#title' => t('Authorization Token Name'),
    '#required' => TRUE,
    '#default_value' => $settings['authorization_token_name'],
  );

  $form['authorization_token_key'] = array(
    '#type' => 'textfield',
    '#title' => t('Authorization Token Key'),
    '#required' => TRUE,
    '#default_value' => $settings['authorization_token_key'],
  );

  return $form;
}


/**
 * Helper function for flattening an array.
 */
function _c4m_web_services_array_flatten($array = null) {
  $result = array();

  if (!is_array($array)) {
    $array = func_get_args();
  }

  foreach ($array as $key => $value) {
    if (is_array($value)) {
      $result = array_merge($result, _c4m_web_services_array_flatten($value));
    } else {
      $result = array_merge($result, array($key => $value));
    }
  }

  return $result;
}

/**
 * Implements hook_services_resources().
 */
function c4m_web_services_services_resources() {
  $node_resource = array(
    'node' => array(
      'operations' => array(
        'c4m_update' => array(
          'file' => array('type' => 'inc', 'module' => 'c4m_web_services', 'name' => 'resources/c4m_web_services_node_resource'),
          'callback' => '_c4m_web_services_node_resource_update',
          'args' => array(
            array(
              'name' => 'dashboard_id',
              'optional' => FALSE,
              'source' => array('path' => 0),
              'type' => 'text',
              'description' => 'The dashboard id of the node to update',
            ),
            array(
              'name' => 'node',
              'optional' => FALSE,
              'source' => 'data',
              'description' => 'The node data to update',
              'type' => 'array',
            ),
          ),
          'access callback' => '_c4m_node_resource_access',
          'access arguments' => array('update'),
          'access arguments append' => TRUE,
        ),
      ),
    ),
  );

  return $node_resource;
}

/**
 * Implements hook_server_info().
 */
function c4m_web_services_server_info() {
  return array(
    'name' => 'C4M REST',
    'path' => 'rest',
    'settings' => array(
      'file' => array('inc', 'rest_server'),
      'form' => '_rest_server_settings',
      'submit' => '_rest_server_settings_submit',
    ),
  );
}

/**
 * Starting point of the REST server.
 *
 * @return type
 */
function c4m_web_services_server() {
  module_load_include('inc', 'c4m_web_services', 'includes/C4MServicesRESTServerFactory');
  module_load_include('inc', 'c4m_web_services', 'includes/C4MRESTServer');
  $endpoint_path = services_get_server_info('endpoint_path', 'services/rest');

  $services_rest_server_factory = 'C4MServicesRESTServerFactory';
  $rest_server_factory = new $services_rest_server_factory(array('endpoint_path' => $endpoint_path));
  /* @var $rest_server C4MRESTServer */
  $rest_server = $rest_server_factory->getRESTServer();

  $canonical_path = $rest_server->getCanonicalPath();
  if (empty($canonical_path)) {
    $endpoint_name = services_get_server_info('endpoint', '');
    $endpoint = services_endpoint_load($endpoint_name);
    return t('Services Endpoint "@name" has been setup successfully.', array('@name' => $endpoint->name));
  }

  try {
    return $rest_server->handle();
  }
  catch (Exception $e) {
    $rest_server->handleException($e);
  }
}

/**
 * Search for the taxonomy terms and update the arguments array for organisations.
 *
 * @param $controller
 *   Controller definition
 * @param $args
 *   Array of arguments
 * @param $options
 *
 * @see services_controller_execute()
 * @see services.runtime.inc
 */
function c4m_web_services_services_request_preprocess_alter($controller, &$args, $options) {
  // Get all Taxonomy Fields of Organisation CT.
  $organisation_taxonomy_fields = field_read_fields([
    'entity_type' => 'node',
    'bundle' => 'organisation',
    'type' => 'taxonomy_term_reference']
  );

  if (empty($organisation_taxonomy_fields)) {
    return;
  }

  // Override the Taxonomy Term Names with Term ids.
  foreach ($args as &$arg) {
    if (is_array($arg)) {
      foreach ($arg as $field_name => &$item) {
        if (is_array($item) &&
          isset($organisation_taxonomy_fields[$field_name])
          && isset($item[LANGUAGE_NONE])) {
          $new_terms = [];
          foreach ($item[LANGUAGE_NONE] as $term_name) {
            if (!empty($term_name)) {
              // If term cannot be found, throw error and stop the process.
              if ($loaded = taxonomy_get_term_by_name($term_name)) {
                foreach ($loaded as $tid => $term) {
                  // Check if the term is from the same Vocab as the Field is configured.
                  // Might have 2 terms with the same name from different vocabularies.
                  if (isset($organisation_taxonomy_fields[$field_name]['settings']['allowed_values'][0]['vocabulary'])
                    && isset($term->vocabulary_machine_name)
                    && $term->vocabulary_machine_name == $organisation_taxonomy_fields[$field_name]['settings']['allowed_values'][0]['vocabulary']) {
                    // Check if the term has parents and add them aswell.
                    // taxonomy_get_parents_all will always return at least the current taxonomy term.
                    if (!empty($term_and_or_parents = taxonomy_get_parents_all($tid))) {
                      foreach ($term_and_or_parents as $term_and_or_parent) {
                        // Only add the new tid if not existing already.
                        if (!empty($term_and_or_parent->tid)
                          && !in_array($term_and_or_parent->tid, $new_terms)) {
                          $new_terms[] = $term_and_or_parent->tid;
                        }
                      }
                    }
                  }
                }
              }
              else {
                // Term with name not found, throw error.
                // Indicate the field they tried to populate with the term
                // that was not found.
                $message = t('Error when searching for taxonomy term name: @term_name.
                 Term was intended for field @field_name.', [
                  '@field_name' => $field_name,
                  '@term_name' => $term_name,
                ]);
                throw new ServicesException($message, 404);
              }
            }
          }
          if (empty($new_terms)) {
            continue;
          }
          $item[LANGUAGE_NONE] = $new_terms;
        }
      }
    }
  }
}

/**
 * Implements hook_services_request_postprocess_alter().
 */
function c4m_web_services_services_request_postprocess_alter($controller, $args, &$result) {
  foreach ($args as $arg) {
    if (is_array($arg)) {
      if (!empty($c4m_contact_persons = $arg['c4m_contact_persons'][LANGUAGE_NONE])
        && !empty($nid = $result['nid'])) {
        c4m_web_services_add_contact_persons($c4m_contact_persons, $nid);
      }
      if (!empty($c4m_organisation_members = $arg['c4m_organisation_members'][LANGUAGE_NONE])
        && !empty($nid = $result['nid'])) {
        c4m_web_services_add_organisation_members($c4m_organisation_members, $nid);
      }
    }
  }

}

/**
 * Helper function for adding users to the c4m_contact_persons field.
 *
 * @param array $contact_persons
 *   The array of users to be set as contact persons.
 *
 * @param array $nid
 *   The nid of the created organisation.
 *
 * @return void|mixed
 *   Shouldn't return anyting.
 */
function c4m_web_services_add_contact_persons($contact_persons, $nid) {
  if (empty($contact_persons) && empty($nid)) {
    return;
  }

  $users = c4m_web_services_get_or_add_user($contact_persons);

  // Add these users to the c4m_contact_persons field.
  if (empty($users)) {
    return;
  }
  $node = node_load($nid);

  // Create an array with the new uids.
  foreach ($users as $user) {
    $node->c4m_contact_persons[LANGUAGE_NONE][] = ['target_id' => $user->uid];
  }
  node_save($node);
}

/**
 * Helper function for adding users as members to a Group - Organisation.
 *
 * @param array $c4m_organisation_members
 *   The array of users to be set as members of the organisation.
 *
 * @param array $nid
 *   The nid of the created organisation.
 *
 * @return void|mixed
 *   Shouldn't return anyting.
 */
function c4m_web_services_add_organisation_members($c4m_organisation_members, $nid) {
  if (empty($c4m_organisation_members) && empty($nid)) {
    return;
  }

  $users = c4m_web_services_get_or_add_user($c4m_organisation_members);

  // Add these users as members of the Group.
  if (empty($users)) {
    return;
  }

  // Remove old members of a group - in case of updating the organisation.
  $old_member_ids = c4m_og_get_group_member_ids($nid);
  foreach ($old_member_ids as $one) {
    og_ungroup('node', $nid, 'user', $one);
  }

  foreach ($users as $user) {
    // Check if the user is already a member.
    if (og_is_member('node', $nid, 'user', $user)) {
      continue;
    }
    // Add the user to the group
    $membership = og_group('node', $nid, ['entity' => $user->uid]);
    if (!empty($membership)) {
      og_role_grant('node', $nid, $user->uid, 2);
    }
  }
}

/**
 * Helper function for getting or creating new users that are sent through the WS.
 *
 * @param array $rest_users
 *   The array of users sent through the WS.
 *
 * @return array
 *   List of users, existing and new ones.
 */
function c4m_web_services_get_or_add_user($rest_users) {
  if (empty($rest_users)) {
    return [];
  }
  $users = [];
  foreach ($rest_users as $key => $rest_user) {
    // First check if all the mandatory data is in the user array.
    // $rest_user['ecas_id'] can be empty when users are pushed through the WS.
    // If it's not empty, we use it as the username in Drupal.
    if (empty($rest_user['first_name'])
      || empty($rest_user['last_name']) || empty($rest_user['email'])) {
      continue;
    }
    // Check if the user already exists by searching for his email.
    if ($user = user_load_by_mail($rest_user['email'])) {
      $users[] = $user;
    }
    else {
      // Otherwise, new user needs to be created and set the authmap for them.
      $new_user_data = [
        'name' => _c4m_web_services_return_valid_name($rest_user['first_name']  . ' ' . $rest_user['last_name']),
        'pass' => user_password(),
        'mail' => $rest_user['email'],
        'c4m_first_name' => [LANGUAGE_NONE => [['value' => $rest_user['first_name']]]],
        'c4m_last_name' => [LANGUAGE_NONE => [['value' => $rest_user['last_name']]]],
        'init' => $rest_user['email'],
        'created' => time(),
        'status' => TRUE,
      ];
      // Create new user.
      $new_user = user_save(drupal_anonymous_user(), $new_user_data);

      if (empty($new_user)) {
        continue;
      }
      // Set Authmap record for this newly created user.
      user_set_authmaps($new_user, array("authname_ecas"=> $rest_user['email']));

      $users[] = $new_user;
    }
  }
  return $users;
}

/**
 * Helper function that returns a valid username.
 *
 * @param string $name
 *   The full name.
 *
 * @return string
 *   A valid username.
 */
function _c4m_web_services_return_valid_name($name) {
  $counter = 1;
  $name_to_check = $name;

  while (_c4m_web_services_check_unique_name($name_to_check)) {
    $name_to_check = $name . $counter;
    $counter++;
  }

  return $name_to_check;
}

/**
 * Helper function that checks for unique username.
 *
 * @param string $name
 *   The full name.
 *
 * @return bool
 *   True if the username is unique.
 */
function _c4m_web_services_check_unique_name($name) {
  $query = db_select('users')
    ->fields('users', array('name'))
    ->condition('name', $name, '=');

  return (bool) $query->execute()->fetchAssoc();
}