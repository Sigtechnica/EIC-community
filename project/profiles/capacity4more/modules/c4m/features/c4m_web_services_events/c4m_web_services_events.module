<?php
define('WS_EVENTSITE_ENDPOINT', 'easme_events/rest');

/**
 * @file
 * Code for the Web Services feature.
 */

include_once 'c4m_web_services_events.features.inc';

/**
 * Implements hook_services_authentication_info().
 */
function c4m_web_services_events_services_authentication_info() {
  return [
    'title' => t('C4M - Request-specific token authorisation'),
    'description' => t('Request-specific token is sent in each request.'),
    'authenticate_call' => '_c4m_web_services_events_authenticate_call',
    'security_settings' => '_c4m_web_services_events_security_settings',
    'default_security_settings' => '_c4m_web_services_events_default_security_settings',
  ];
}

/**
 * Authorises a call using request-specific token to verify the request.
 *
 * @param array $settings
 *   The settings for the authorisation module.
 * @param array $method
 *   The method that's being called.
 * @param array $args
 *   The arguments that are being used to call the method.
 *
 * @return null|string
 *   Returns nothing, or a error message if authorisation fails.
 *
 * @see c4m_web_services_events_services_authentication_info()
 */
function _c4m_web_services_events_authenticate_call(array $settings, array $method, array $args) {

  $endpoint_path = services_get_server_info('endpoint_path', '');
  $context = new ServicesContext($endpoint_path);
  $context->buildFromGlobals();

  $valid_token = FALSE;
  // Check if the header contains the authorization token. 
  if (NULL !== $context->getServerVariable("HTTP_" . strtoupper($settings["authorization_token_name"]))) {
    if ($context->getServerVariable("HTTP_" . strtoupper($settings["authorization_token_name"])) === $settings["authorization_token_key"]) {
      $valid_token = TRUE;
    }
  }
  else {
    // Get the original request body.
    $arguments = _c4m_web_services_events_array_flatten($args);
    foreach ($arguments as $key => $one) {
      if ($key == $settings["authorization_token_name"] && $one == $settings["authorization_token_key"]) {
        $valid_token = TRUE;
        break;
      }
    }
  }
  if (!$valid_token) {
    return t('Invalid token value.');
  }

  // Open session for Admin user to edit/create content.
  global $user;
  drupal_save_session(FALSE);
  $user = user_load_by_name('dashboard_user');
  if (empty($user)) {
    return t('Dashboard user not available, contact site administrator.');
  }
}

/**
 * Returns an associative array of Form API elements for a settings form.
 *
 * @see c4m_web_services_events_services_authentication_info()
 */
function _c4m_web_services_events_default_security_settings() {
  return [
    'authorization_token_name' => 'Authorization',
    'authorization_token_key' => 'dh349fh3Fh48gfdFDhsg23DFdgh',
  ];
}

/**
 * Returns an array with the default settings for the auth module.
 *
 * @see c4m_web_services_events_services_authentication_info()
 */
function _c4m_web_services_events_security_settings($settings, &$form_state) {
  $form = [];

  $form['authorization_token_name'] = [
    '#type' => 'textfield',
    '#title' => t('Authorization Token Name'),
    '#required' => TRUE,
    '#default_value' => $settings['authorization_token_name'],
  ];

  $form['authorization_token_key'] = [
    '#type' => 'textfield',
    '#title' => t('Authorization Token Key'),
    '#required' => TRUE,
    '#default_value' => $settings['authorization_token_key'],
  ];

  return $form;
}

/**
 * Helper function for flattening an array.
 */
function _c4m_web_services_events_array_flatten($array = NULL) {
  $result = [];

  if (!is_array($array)) {
    $array = func_get_args();
  }

  foreach ($array as $key => $value) {
    if (is_array($value)) {
      $result = array_merge($result, _c4m_web_services_events_array_flatten($value));
    }
    else {
      $result = array_merge($result, [$key => $value]);
    }
  }

  return $result;
}

/**
 * Implements hook_services_resources().
 */
function c4m_web_services_events_services_resources() {
  $node_resource = [
    'eventsite' => [
      'operations' => [
        'c4m_update_event' => [
          'file' => [
            'type' => 'inc',
            'module' => 'c4m_web_services_events',
            'name' => 'resources/c4m_web_services_eventsite_resource',
          ],
          'callback' => '_c4m_web_services_events_eventsite_resource_update',
          'args' => [
            [
              'name' => 'event_id',
              'optional' => FALSE,
              'source' => ['path' => 0],
              'type' => 'text',
              'description' => 'The event id of the event node to update',
            ],
            [
              'name' => 'node',
              'optional' => FALSE,
              'source' => 'data',
              'description' => 'The node data to update',
              'type' => 'array',
            ],
          ],
          'access callback' => '_c4m_node_events_resource_access_using_dashboard_id',
          'access arguments' => ['update'], // CHECK
          'access arguments append' => TRUE,
        ],
        'retrieve' => array(
          'file' => array('type' => 'inc', 'module' => 'c4m_web_services_events', 'name' => 'resources/c4m_web_services_eventsite_resource'),
          'callback' => '_c4m_node_resource_retrieve_via_dashboard_id',
          'args' => array(
            array(
              'name' => 'dashboard_event_id',
              'optional' => FALSE,
              'source' => array('path' => 0),
              'type' => 'int',
              'description' => 'The dashboard event ID  to get',
            ),
          ),
          'access callback' => '_c4m_node_events_resource_access_using_dashboard_id',
          'access arguments' => array('view'),
          'access arguments append' => TRUE,
        ),
        'create' => array(
          'help' => 'Create a node',
          'file' => array('type' => 'inc', 'module' => 'services', 'name' => 'resources/node_resource'),
          'callback' => '_node_resource_create',
          'args' => array(
            array(
              'name' => 'node',
              'optional' => FALSE,
              'source' => 'data',
              'description' => 'The node data to create',
              'type' => 'array',
            ),
          ),
          'access callback' => '_node_resource_access', // TO CHECK
          'access arguments' => array('create'),
          'access arguments append' => TRUE,
        ),
      ],
    ],
  ];

  return $node_resource;
}

/**
 * Implements hook_server_info().
 */
function c4m_web_services_events_server_info() {
  return [
    'name' => 'C4M REST',
    'path' => 'rest',
    'settings' => [
      'file' => ['inc', 'rest_server'],
      'form' => '_rest_server_settings',
      'submit' => '_rest_server_settings_submit',
    ],
  ];
}

/**
 * Starting point of the REST server.
 */
function c4m_web_services_events_server() {
  module_load_include('inc', 'c4m_web_services_events', 'includes/C4MServicesRESTServerFactory');
  module_load_include('inc', 'c4m_web_services_events', 'includes/C4MRESTServer');
  $endpoint_path = services_get_server_info('endpoint_path', 'services/rest');

  $services_rest_server_factory = 'C4MServicesRESTServerFactory';
  $rest_server_factory = new $services_rest_server_factory(['endpoint_path' => $endpoint_path]);
  /* @var $rest_server C4MRESTServer */
  $rest_server = $rest_server_factory->getRESTServer();

  $canonical_path = $rest_server->getCanonicalPath();
  if (empty($canonical_path)) {
    $endpoint_name = services_get_server_info('endpoint', '');
    $endpoint = services_endpoint_load($endpoint_name);
    return t('Services Endpoint "@name" has been setup successfully.', ['@name' => $endpoint->name]);
  }

  try {
    return $rest_server->handle();
  }
  catch (Exception $e) {
    $rest_server->handleException($e);
  }
}

/**
 * Check if the event(site) exists or not.
 * Look for the taxonomy terms and update the arguments array for organisations.
 *
 * @param array $controller
 *   Controller definition.
 * @param array $args
 *   Array of arguments.
 * @param array $options
 *   Options.
 *
 * @see services_controller_execute()
 * @see services.runtime.inc
 */
function c4m_web_services_events_services_request_preprocess_alter(array $controller, array &$args, array $options) {
  // Check by dashboard_id when Creating the new Event if already exists.
  if (isset($options['resource']) && $options['resource'] == "eventsite") {
    if (isset($controller["callback"]) && $controller["callback"] === '_node_resource_create') {
      foreach ($args as &$arg) {
        if (is_array($arg) && isset($arg['c4m_event_dashboard_id']) && isset($arg['c4m_event_dashboard_id'][LANGUAGE_NONE][0]['value'])) {
          $node = c4m_web_services_events_get_existing_node($arg['c4m_event_dashboard_id'][LANGUAGE_NONE][0]['value']);
          if (empty($node)) {
            continue;
          }
          $xml = new SimpleXMLElement('<eventsite_node_exists/>');
          $xml->addChild('event_name', $node->title);
          $xml->addChild('nid', $node->nid);
          $xml->addChild('c4m_event_dashboard_id', $arg['c4m_event_dashboard_id'][LANGUAGE_NONE][0]['value']);
          $xml->addChild('uri', url($node->purl, ['absolute' => TRUE]));
          throw new ServicesException($xml->asXML(), 302);
        }
      }
      // Hard code event for now @ToDo.
      // $arg['event_type']['und'][0]['item'] = 'event';
      $x = node_load(10010);



      // $arg['c4m_body']['und'][0]['value'] = "Gonna need to encode the tags.";
      // // overwriting the event_type 
      // //Need to convert the SMED event type id to the correct taxonomy id.
      // $arg['event_type']['und'][0]['item'] = 'event';

      // Get all Taxonomy Fields of Eventsite Content Type.
      $eventsites_taxonomy_fields = field_read_fields([
        'entity_type' => 'node',
        'bundle' => 'event_site',
        'type' => 'taxonomy_term_reference',
      ]);

      if (empty($eventsites_taxonomy_fields)) {
        // taxonomy is required, should give a proper error probably.
        $message = t('Missing taxonomies for CT @content_type.', [
          '@content_type' => 'event_site',  
        ]);
        throw new ServicesException($message, 404);
      }

      // Override the Taxonomy Term Names with Term ids.
      foreach ($args as &$arg) {
        if (is_array($arg)) {
          foreach ($arg as $field_name => &$item) {
            if (is_array($item) && isset($eventsites_taxonomy_fields[$field_name]) && isset($item[LANGUAGE_NONE])) {
              $new_terms = [];
              foreach ($item[LANGUAGE_NONE] as $term_key) {
                if (!empty($term_key)) {
                  // If term cannot be found, throw error and stop the process.
                  if (isset($eventsites_taxonomy_fields[$field_name]['settings']['allowed_values'][0]['vocabulary']) && $loaded = c4m_web_services_taxonomy_get_term_by_key($term_key, $eventsites_taxonomy_fields[$field_name]['settings']['allowed_values'][0]['vocabulary'])) {
                    foreach ($loaded as $tid => $term) {
                      // Check if the term has parents and add them aswell.
                      // taxonomy_get_parents_all will always return at least the
                      // current taxonomy term.
                      if (!empty($term_and_or_parents = taxonomy_get_parents_all($tid))) {
                        foreach ($term_and_or_parents as $term_and_or_parent) {
                          // Only add the new tid if not existing already.
                          if (!empty($term_and_or_parent->tid) && !in_array($term_and_or_parent->tid, $new_terms)) {
                            $new_terms[] = $term_and_or_parent->tid;
                          }
                        }
                      }
                    }
                  }
                  else {
                    // Term with name not found, throw error.
                    // Indicate the field they tried to populate with the term
                    // that was not found.
                    $message = t('Error when searching for taxonomy term with key: @term_key. Term was intended for field @field_name.', [
                      '@field_name' => $field_name,
                      '@term_key' => $term_key,
                    ]);
                    throw new ServicesException($message, 404);
                  }
                }
              }
              if (empty($new_terms)) {
                continue;
              }
              $item[LANGUAGE_NONE] = $new_terms;
            }

            // event_type conversion : 
            if ($field_name == "c4m_event_type") {
              $event_type_field = field_read_fields([
                'entity_type' => 'node',
                'bundle' => 'event_site',
              ]);
              if (isset($item[LANGUAGE_NONE][0]['value'])) {
                $item[LANGUAGE_NONE] = "corporate_days";
              }

            }

          }
          // day/month/year - slashes not -
          // create correct datetimeformat. be warnedd minutes are in 15 minutes intervals.
          $start_datetime = DateTime::createFromFormat('Y-m-d H:i', $arg["c4m_datetime_end"]["und"][0]["value"]);
          $arg["c4m_datetime_end"]["und"][0]["value"] = array();
          $arg["c4m_datetime_end"]["und"][0]["value"]['date'] = $start_datetime->format('d/m/Y');
          $arg["c4m_datetime_end"]["und"][0]["value"]['time'] = $start_datetime->format('H:i');

          $end_datetime = DateTime::createFromFormat('Y-m-d H:i', $arg["c4m_datetime_end"]["und"][0]["value2"]);
          $arg["c4m_datetime_end"]["und"][0]["value2"] = array();
          $arg["c4m_datetime_end"]["und"][0]["value2"]['date'] = $end_datetime->format('d/m/Y');
          $arg["c4m_datetime_end"]["und"][0]["value2"]['time'] = $end_datetime->format('H:i');

          //if isset(arg["c4m_datetime_end"]["und"][0]["value"]['date'] && strpos(arg["c4m_datetime_end"]["und"][0]["value"]['date'], '/' <)
          //isset(arg["c4m_datetime_end"]["und"][0]["value2"]['date'] && arg["c4m_datetime_end"]["und"][0]["value2"]['time'])
          // $arg["c4m_datetime_end"]["und"][0]["value"] = array('date'=>"06/12/2019",'time'=>"06:00");
          // $arg["c4m_datetime_end"]["und"][0]["value2"] = array('date'=>"06/12/2019",'time'=>"17:44");
          // Add the purl based on the title - group path is required:
          $arg['purl'] = array("value" => str_replace(' ', '-', $arg['title']));
        }
      }
    }
  }
}

/**
 * Implements hook_services_request_postprocess_alter().
 */
function c4m_web_services_events_services_request_postprocess_alter($controller, $args, &$result) {
  $endpoint_path = services_get_server_info('endpoint_path', '');
  $context = new ServicesContext($endpoint_path);
  $context->buildFromGlobals();
  /* Going to clean up some of parameters, SMED does not need all info back.*/
  if ($context->getRequestMethod() === "GET") {
    $properties = array('log', 'sticky', 'ds_switch','comment','promote','tnid','translate');
    foreach ($properties as $property) {
      unset($result->{$property});
    }
  }

  foreach ($args as $arg) {
    if (!is_array($arg)) {
      continue;
    }
    if (empty($nid = $result['nid'])) {
      continue;
    }
  }
}

/**
 * Helper function for adding emails as keys for every user.
 */
function c4m_web_services_events_process_users_array($rest_users) {
  if (!$rest_users) {
    return;
  }
  $nre = [];
  foreach ($rest_users as $rest_user) {
    $nre[$rest_user['email']] = $rest_user;
  }
  unset($rest_users);
  return $nre;
}


/**
 * Try to map a dashboard id to an existing node.
 *
 * @param int $organisation_dashboard_id
 *   Dashboard id of the node.
 *
 * @return bool|object
 *   A node object. FALSE if no node found.
 */
function c4m_web_services_events_get_existing_node($event_dashboard_id) {
  $node = FALSE;
  $query = new EntityFieldQuery();
  $query->entityCondition('entity_type', 'node')
    ->entityCondition('bundle', 'event_site')
    ->fieldCondition('c4m_event_dashboard_id', 'value', $event_dashboard_id, '=')
    ->range(0, 1)
    ->addMetaData('account', user_load_by_name('dashboard_user'));

  $result = $query->execute();
  if (isset($result['node'])) {
    $node = array_shift($result['node']);
    $node = node_load($node->nid);
  }
  return $node;
}