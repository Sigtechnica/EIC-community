<?php

/**
 * @file
 * Code for the Wiki feature.
 */

include_once 'c4m_features_og_wiki.features.inc';

/**
 * Implements hook_c4m_og_feature_info().
 */
function c4m_features_og_wiki_c4m_og_feature_info() {
  return array(
    'c4m_features_og_wiki' => array(
      'name' => t('Wiki pages'),
      'description' => t('Wiki overview.'),
      'machine_name' => 'c4m_features_og_wiki',
      'weight' => 1,
      'default' => TRUE,
      // Not needed for organisations.
      'group_types' => array('group', 'project', 'event_site'),
      'content_types' => array('wiki_page'),
    ),
  );
}

/**
 * Implements hook_menu().
 */
function c4m_features_og_wiki_menu() {
  $items = array();

  $items['wiki'] = array(
    'title' => 'Wiki pages',
    'page callback' => 'c4m_features_og_wiki_wiki',
    'file' => 'includes/c4m_features_og_wiki.inc',
    'access callback' => array('c4m_og_access'),
    'access arguments' => array('c4m_features_og_wiki'),
    'type' => MENU_CALLBACK,
  );

  $items['node/%node/wiki/rearrange'] = array(
    'title' => 'Rearrange',
    'page callback' => 'c4m_content_wiki_page_rearrange_page',
    'access callback' => array('c4m_features_og_wiki_access'),
    'access arguments' => array('administer group'),
    'type' => MENU_LOCAL_TASK,
  );

  return $items;
}

/**
 * Implements hook_menu_alter().
 */
function c4m_features_og_wiki_menu_alter(&$items) {
  // Unset the book outline tab,
  // because we have are own rearrange integration.
  unset($items['node/%node/outline']);
}

/**
 * Access callback for the wiki rearrange menu item.
 *
 * @param mixed $options
 *   The optional options.
 *
 * @return bool
 *   Has the user access.
 */
function c4m_features_og_wiki_access($options = array()) {
  if (!og_context_is_init()) {
    // OG context was not determined yet, so register the path and return early.
    // The next time this access callback will be called, it will not enter
    // here.
    og_context_access_callback_register_path($_GET['q']);
    return FALSE;
  }

  $group = og_context();

  // Check if user has access to group context,
  // and see if the feature is enabled.
  if (!c4m_og_access('c4m_features_og_wiki')) {
    return FALSE;
  }

  // Check if the user has the permission  "edit any wiki_page content".
  $access = og_user_access('node', $group['gid'], $options);
  if (!$access) {
    return FALSE;
  }

  // Check if the node type is wiki_page.
  $node = node_load(arg(1));
  if ($node && $node->type != 'wiki_page') {
    return FALSE;
  }

  return TRUE;
}

/**
 * Page callback for the wiki rearrange menu item.
 *
 * @return mixed
 *   Returns wiki rearrange view.
 */
function c4m_content_wiki_page_rearrange_page() {
  drupal_set_title('Rearrange');
  $node = menu_get_object();
  $og_id = c4m_og_get_gid_from_entity($node);
  $output = views_embed_view('c4m_wiki', 'wiki_rearrange_page', $og_id, $og_id);

  return $output;
}

/**
 * Implements hook_theme().
 */
function c4m_features_og_wiki_theme() {
  return array(
    'c4m_features_og_wiki_wiki' => array(
      'variables' => array('content' => NULL),
      'file'      => 'includes/c4m_features_og_wiki.theme.inc',
    ),
  );
}
